"0","data$target <- factor(data$target, levels = c(""0"", ""1""))"
"0","svm_experiment <- function(kernel_type, gamma_value = NULL) {"
"0","  "
"0","  if (kernel_type == ""linear"") {"
"0","    method <- ""svmLinear"""
"0","  } else if (kernel_type == ""polynomial"") {"
"0","    method <- ""svmPoly"""
"0","  } else if (kernel_type == ""sigmoid"") {"
"0","    method <- ""svmRadial""  # Using RBF kernel with default gamma for sigmoid-like behavior"
"0","  } else if (kernel_type == ""sigmoid_custom"") {"
"0","    method <- ""svmRadial""  # Use the radial basis function with custom gamma for sigmoid"
"0","  }"
"0",""
"0","  # Train SVM based on kernel type and custom gamma if provided"
"0","  if (!is.null(gamma_value)) {"
"0","    model <- train(target ~ ., "
"0","                   data = data, "
"0","                   method = method, "
"0","                   trControl = train_control, "
"0","                   tuneGrid = data.frame(C = 1, sigma = gamma_value))  # Custom gamma (sigma)"
"0","  } else {"
"0","    model <- train(target ~ ., "
"0","                   data = data, "
"0","                   method = method, "
"0","                   trControl = train_control)"
"0","  }"
"0","  "
"0","  # Predictions and confusion matrix"
"0","  predictions <- predict(model, data)"
"0","  confusion_matrix <- confusionMatrix(predictions, data$target)"
"0","  "
"0","  # Extract metrics"
"0","  accuracy <- confusion_matrix$overall[""Accuracy""]"
"0","  precision <- confusion_matrix$byClass[""Pos Pred Value""]"
"0","  recall <- confusion_matrix$byClass[""Sensitivity""]"
"0","  "
"0","  return(c(accuracy, precision, recall))"
"0","}"
"0",""
